
function(_architcture_suffix
    )

endfunction()

function(_linux_package_name)
  # Get Distro name information
  # Check if Debian-link
  string(REGEX MATCH debian|buntu DEBTYPE "${SYSTEM_LIKE}")
  if((NOT ("${DEBTYPE}" STREQUAL "")) OR ("${SYSTEM_NAME}" STREQUAL "debian"))
    set(CPACK_GENERATOR "DEB")
  endif()

  # Check if Rpm-like
  string(REGEX MATCH suse|fedora|rhel RPMTYPE "${SYSTEM_LIKE}")
  string(REGEX MATCH fedora|suse|rhel RPMNAME "${SYSTEM_NAME}")
  if((NOT ("${RPMTYPE}" STREQUAL "")) OR (NOT ("${RPMNAME}" STREQUAL "")))
      set(CPACK_GENERATOR "RPM")
  endif()

  # Disto specific name adjustments
  if("${SYSTEM_NAME}" STREQUAL "opensuse-tumbleweed")
    set(DISTRO_NAME "opensuse")
    set(DISTRO_CODENAME "tumbleweed")
  elseif("${DISTRO_NAME}" STREQUAL "arch")
    # Arch linux is rolling the version id reported is the date of last iso.
    set(DISTRO_VERSION_ID "")
  else()
    set(DISTRO_NAME "${SYSTEM_NAME}")
    set(DISTRO_CODENAME "${SYSTEM_CODENAME}")
    set(DISTRO_VERSION_ID "${SYSTEM_VERSION_ID}")
  endif()

  # Determain the code name to be used if any
  if(NOT "${DISTRO_VERSION_ID}" STREQUAL "")
    set(CN_STRING "${DISTRO_VERSION_ID}_")
  endif()

  if(NOT "${DISTRO_CODENAME}" STREQUAL "")
    set(CN_STRING "${DISTRO_CODENAME}_")
  endif()

  set(OS_STRING "${DISTRO_NAME}_${CN_STRING}${CMAKE_SYSTEM_PROCESSOR}" PARENT_SCOPE)
endfunction()

##Cpack Deployment Info
#Generate list of built Targets
option(SPLITPACKAGES "build split packages" OFF)
set(RUNTIME_DEPENDS_PATH ${CMAKE_BINARY_DIR}/runtime_depends)

get_property( TARGETS GLOBAL PROPERTY ${CMAKE_PROJECT_NAME}_targets)
set(TARGET_FILES "")
foreach (_target ${TARGETS})
    list(APPEND TARGET_FILES "${CMAKE_BINARY_DIR}/target-temp/${_target}.cmake")
    file(GENERATE OUTPUT ${CMAKE_BINARY_DIR}/target-temp/${_target}.cmake CONTENT $<TARGET_FILE:${_target}>)
endforeach()

## pull info about non qt depends
#get_property( ZLIB_TARGET GLOBAL PROPERTY zlib_target)
##

#Generic Info
## SET PACKAGE CONTACT AND VENDOR
set(CPACK_PACKAGE_CONTACT ${CMAKE_PROJECT_CONTACT})
set(CPACK_PACKAGE_VENDOR ${CMAKE_PROJECT_SUPPLIER})
##
set(CPACK_STRIP_FILES TRUE)
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_PROJECT_LICENSE_FILE}")
set(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
set(CPACK_PACKAGE_HOMEPAGE_URL "${CMAKE_PROJECT_HOMEPAGE_URL}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${CMAKE_PROJECT_DESCRIPTION})
set(CPACK_PACKAGE_VERSION ${CMAKE_PROJECT_VERSION})

## SET OS NAME
if(CMAKE_SYSTEM_NAME MATCHES "Darwin")
    set(OS_STRING "macos")
elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(OS_STRING "win64")
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        set(OS_STRING "win32")
    endif()
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
    _linux_package_name()
else()
    set(OS_STRING ${CMAKE_SYSTEM_NAME}_${CMAKE_SYSTEM_PROCESSOR})
endif()

# This is used to override the version portion of the label if wanted.
if (NOT PACKAGE_VERSION_LABEL)
    set(PACKAGE_VERSION_LABEL ${CPACK_PACKAGE_VERSION})
endif()

set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${OS_STRING}")

set(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION})
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_PROJECT_LICENSE_FILE}")

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/preBuildCPack.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/preBuildCPack.cmake @ONLY)
set(CPACK_PRE_BUILD_SCRIPTS ${CMAKE_CURRENT_BINARY_DIR}/preBuildCPack.cmake)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cpackOptions.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/cpackOptions.cmake @ONLY)
set(CPACK_PROJECT_CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/cpackOptions.cmake)

set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY OFF)

#components

set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_LIBRARIES_DISPLAY_NAME "Libraries")
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_LIBRARIES_DISCRIPTION "${CMAKE_PROJECT_NAME} libraries")

set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_I18N_DISPLAY_NAME "Translations")
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_I18N_DESCRIPTION "${CMAKE_PROJECT_NAME} Translation files")
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_I18N_DEPENDS ${CMAKE_PROJECT_UC_NAME}_LIBRARIES)
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_I18N_DISABLED FALSE)

set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_HEADERS_DISPLAY_NAME "Headers")
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_HEADERS_DESCRIPTION "${CMAKE_PROJECT_NAME} Headers and cmake files")
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_HEADERS_DEPENDS ${CMAKE_PROJECT_UC_NAME}_LIBRARIES)
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_HEADERS_DISABLED FALSE)

set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_DOCS_DISPLAY_NAME "Documentation")
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_DOCS_DISCRIPTION "Documentation for ${CMAKE_PROJECT_NAME}")

set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_DEBUG_DISPLAY_NAME "Debug")
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_DEBUG_DESCRIPTION "Debugging symbols for ${CMAKE_PROJECT_NAME}")
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_DEBUG_DEPENDS ${CMAKE_PROJECT_UC_NAME}_LIBRARIES)

set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_DEMOS_DISPLAY_NAME "Demos")
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_DEMOS_DESCRIPTION "Demo applicaions using ${CMAKE_PROJECT_NAME}")
set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_DEMOS_DEPENDS ${CMAKE_PROJECT_UC_NAME}_LIBRARIES)


## Demos have to be added
# The componet name is the "name of the project"
set(CPACK_COMPONENT_${CMAKE_PROJECT_NAME}WidgetGallery_DISPLAY_NAME "Demoapp: Widget Gallery")
set(CPACK_COMPONENT_${CMAKE_PROJECT_NAME}WidgetGallery_DESCRIPTION "A Demo Application using ${CMAKE_PROJECT_NAME}'s widgets")
set(CPACK_COMPONENT_${CMAKE_PROJECT_NAME}WidgetGallery_DEPENDS ${CMAKE_PROJECT_UC_NAME}_LIBRARIES)
set(CPACK_COMPONENT_${CMAKE_PROJECT_NAME}WidgetGallery_GROUP ${CMAKE_PROJECT_UC_NAME}_DEMOS)

set(CPACK_COMPONENT_${CMAKE_PROJECT_NAME}QmlGallery_DISPLAY_NAME "Demoapp: Qml Gallery")
set(CPACK_COMPONENT_${CMAKE_PROJECT_NAME}QmlGallery_DESCRIPTION "A Demo Application using ${CMAKE_PROJECT_NAME}'s Qml Components")
set(CPACK_COMPONENT_${CMAKE_PROJECT_NAME}QmlGallery_DEPENDS ${CMAKE_PROJECT_UC_NAME}_LIBRARIES)
set(CPACK_COMPONENT_${CMAKE_PROJECT_NAME}QmlGallery_GROUP ${CMAKE_PROJECT_UC_NAME}_DEMOS)

### INSTALL SPECIFIC ITEMS
#IFW
set(CPACK_IFW_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
set(CPACK_IFW_PACKAGE_TITLE "${CPACK_PACKAGE_NAME} Installer")
set(CPACK_IFW_PACKAGE_PUBLISHER ${CPACK_PACKAGE_CONTACT})
set(CPACK_IFW_PACKAGE_WIZARD_SHOW_PAGE_LIST OFF)
set(CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_NAME ${CMAKE_PROJECT_NAME}-install-tool)
set(CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_INI_FILE ${CMAKE_PROJECT_NAME}-install-tool.ini)
if(WIN32)
    set(CPACK_IFW_PACKAGE_ICON ${CMAKE_CURRENT_SOURCE_DIR}/${CMAKE_PROJECT_NAME}_installer.ico)
elseif(APPLE)
    set(CPACK_IFW_PACKAGE_ICON ${CMAKE_CURRENT_SOURCE_DIR}/${CMAKE_PROJECT_NAME}_installer.icns)
endif()

set(CPACK_IFW_PACKAGE_WINDOW_ICON ${CMAKE_CURRENT_SOURCE_DIR}/${CMAKE_PROJECT_NAME}_installer.png)


# DEBIAN
set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)
set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
set(CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION TRUE)
###
if(SPLITPACKAGES)
    set(CPACK_DEB_COMPONENT_INSTALL TRUE)
    set(CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS YES)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_LIBRARIES_PACKAGE_NAME lib${CMAKE_PROJECT_NAME})
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_LIBRARIES_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME})
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_LIBRARIES_PACKAGE_DEPENDS ${DEBIAN_DEPENDS_STRING})
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_LIBRARIES_PACKAGE_CONFLICTS lib${CMAKE_PROJECT_NAME}-all)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_I18N_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-i18n)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_I18N_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-i18n)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_I18N_PACKAGE_DEPENDS "lib${CMAKE_PROJECT_NAME} (= ${CPACK_PACKAGE_VERSION})")
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_I18N_PACKAGE_ARCHITECTURE all)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_I18N_PACKAGE_ENHANCES lib${CMAKE_PROJECT_NAME})
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_I18N_PACKAGE_CONFLICTS lib${CMAKE_PROJECT_NAME}-all)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_HEADERS_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-dev)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_HEADERS_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-dev)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_HEADERS_PACKAGE_ENHANCES lib${CMAKE_PROJECT_NAME})
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_HEADERS_PACKAGE_CONFLICTS lib${CMAKE_PROJECT_NAME}-all)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_HEADERS_PACKAGE_DEPENDS "lib${CMAKE_PROJECT_NAME} (= ${CPACK_PACKAGE_VERSION})")
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DEBUG_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-dbg)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DEBUG_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-dbg)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DEBUG_PACKAGE_ENHANCES lib${CMAKE_PROJECT_NAME})
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DEBUG_PACKAGE_CONFLICTS lib${CMAKE_PROJECT_NAME}-all)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DEBUG_PACKAGE_DEPENDS "lib${CMAKE_PROJECT_NAME} (= ${CPACK_PACKAGE_VERSION})")
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DEMOS_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-demos)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DEMOS_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-demos)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DEMOS_PACKAGE_DEPENDS "lib${CMAKE_PROJECT_NAME} (= ${CPACK_PACKAGE_VERSION})")
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DEMOS_PACKAGE_CONFLICTS lib${CMAKE_PROJECT_NAME}-all)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DOCS_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-doc)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DOCS_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-doc)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DOCS_PACKAGE_ENHANCES lib${CMAKE_PROJECT_NAME})
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DOCS_PACKAGE_ARCHITECTURE all)
    set(CPACK_DEBIAN_${CMAKE_PROJECT_UC_NAME}_DOCS_PACKAGE_CONFLICTS lib${CMAKE_PROJECT_NAME}-all)
else ()
    set(CPACK_DEBIAN_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-all)
    set(CPACK_DEBIAN_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-all)
    set(CPACK_DEBIAN_PACKAGE_CONFLICTS "lib${CMAKE_PROJECT_NAME}, lib${CMAKE_PROJECT_NAME}-dev, lib${CMAKE_PROJECT_NAME}-demos, lib${CMAKE_PROJECT_NAME}-docs, lib${CMAKE_PROJECT_NAME}-dbg, lib${CMAKE_PROJECT_NAME}-i18n")
    set(CPACK_DEBIAN_PACKAGE_REPLACES "lib${CMAKE_PROJECT_NAME}, lib${CMAKE_PROJECT_NAME}-dev, lib${CMAKE_PROJECT_NAME}-demos, lib${CMAKE_PROJECT_NAME}-docs, lib${CMAKE_PROJECT_NAME}-dbg, lib${CMAKE_PROJECT_NAME}-i18n")
endif()

# RPM
set(CPACK_RPM_PACKAGE_NAME lib${CMAKE_PROJECT_NAME})
set(CPACK_RPM_FILE_NAME RPM-DEFAULT)
if(SPLITPACKAGES)
    set(CPACK_RPM_COMPONENT_INSTALL TRUE)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_LIBRARIES_PACKAGE_NAME lib${CMAKE_PROJECT_NAME})
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_I18N_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-i18n)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_I18N_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-i18n)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_I18N_PACKAGE_ARCHITECTURE noarch)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_HEADERS_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-dev)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_HEADERS_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-dev)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_DEBUG_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-dbg)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_DEBUG_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-dbg)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_DEMOS_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-demos)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_DEMOS_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-demos)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_DOCS_PACKAGE_NAME lib${CMAKE_PROJECT_NAME}-doc)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_DOCS_PACKAGE_PROVIDES lib${CMAKE_PROJECT_NAME}-doc)
    set(CPACK_RPM_${CMAKE_PROJECT_UC_NAME}_DOCS_PACKAGE_ARCHITECTURE noarch)
endif()

#WIX
## GENERATE A UUID FOR BOTH IF YOU USE WIX
set(CPACK_WIX_UPGRADE_GUID "")
set(CPACK_WIX_PRODUCT_GUID "")
set(CPACK_WIX_PROPERTY_ARPCOMMENTS ${CPACK_PACKAGE_DESCRIPTION_SUMMARY})
set(CPACK_WIX_PROPERTY_ARPURLUPDATEINFO "")

#Set base Name And Generator Based on the system
if(CMAKE_SYSTEM_NAME MATCHES "Darwin")
    set(CPACK_GENERATOR "ZIP")
elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(CPACK_GENERATOR "7Z")
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(CPACK_GENERATOR "TGZ")
    if(EXISTS "/usr/bin/rpmbuild")
        list(APPEND CPACK_GENERATOR "RPM")
    endif()
endif()

if (CPACK_IFW_FRAMEWORK_VERSION)
    list(APPEND CPACK_GENERATOR "IFW")
    list(APPEND CPACK_PACKAGE_EXECUTABLES "${CMAKE_PROJECT_NAME}-install-tool;Modify ${CMAKE_PROJECT_NAME} Install")
endif()

#Source Package
set(CPACK_SOURCE_IGNORE_FILES "build" .directory .git* )
set(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-src")
set(CPACK_SOURCE_GENERATOR "TGZ;ZIP")

if(WIN32)
    install(
        DIRECTORY ${RUNTIME_DEPENDS_PATH}/
        DESTINATION ${CMAKE_INSTALL_BINDIR}
        COMPONENT ${CMAKE_PROJECT_NAME}_depends
    )

    set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_DEPENDS_HIDDEN TRUE)
    set(CPACK_COMPONENT_${CMAKE_PROJECT_UC_NAME}_DEPENDS_REQUIRED TRUE)
endif()

get_cmake_property(CPACK_COMPONENTS_ALL COMPONENTS)
list(FIND CPACK_COMPONENTS_ALL "${CMAKE_PROJECT_UC_NAME}_HEADERS" hasDev)
if (${hasDev} EQUAL -1)
    list(PREPEND CPACK_COMPONENTS_ALL "${CMAKE_PROJECT_UC_NAME}_HEADERS")
endif()
list(FIND CPACK_COMPONENTS_ALL "${CMAKE_PROJECT_UC_NAME}_DEBUG" hasDbg)
if (${hasDbg} EQUAL -1)
    list(PREPEND CPACK_COMPONENTS_ALL "${CMAKE_PROJECT_UC_NAME}_DEBUG")
endif()
include(CPack)
